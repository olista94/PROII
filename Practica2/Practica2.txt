Práctica 2

Para los siguientes enunciados, crea el código de la clase Java correspondiente y añade un ejemplo de uso.

    Dada la clase Libro del ejercicio 5 de la práctica 1 (https://ideone.com/HWBk07), implementa en el método main un vector primitivo de objetos de tipo Libro, añade algún libro al vector y visualiza los datos de los libros almacenados en el vector. Añade un método estático (en la clase principal) para leer un libro.

    Los coches se definen por su marca (marca), modelo (modelo), número de puertas (numPuertas), capacidad del maletero en metros cúbicos (capacidad), el tipo de coche (tipo, que puede ser MONOVOLUMEN, FAMILIAR, COMPACTO, BERLINA y CAMIONETA) y número de caballos (cv). Se expresan como "marca modelo (tipo, cv CV), numPuertas PUERTAS, MALETERO de capacidad  METROS CÚBICOS". El coche de referencia es un "Volkswagen Escarabajo (COMPACTO, 61 CV), 4 PUERTAS, MALETERO de 100 METROS CÚBICOS".

    Los artículos de una tienda tienen una marca, una referencia, una talla y un coste básico. Dichos productos se pueden vender de dos maneras: al por menor, añadiendo el 21% de IVA para obtener el precio con IVA, o al por mayor, añadiendo un 8% de ganancia para obtener el precio al por mayor (en este caso no se incluye IVA). Los artículos se expresan como "referencia - marca (talla):  coste EUROS". Será necesario un método calculaPrecioFinal(tipoVenta) al que se le pueda pasar el tipo de venta específico (se pueden definir como constantes los tipos de venta). Existirán métodos que devuelvan esta información (por ejemplo, calculaPrecioPorMayor() y calculaPrecioPorMenor()) como un valor numérico, mientras que el método toString() estándar mostrará la información al por menor.

    Un alumno de PROII se define por un dni (sin letra), unos apellidos y un nombre. Además, tiene cinco notas asociadas, una para el Bloque I, otra para el Bloque II, la correspondiente al Bloque III, otra para Programación y finalmente la de Practicas. Además de un constructor (que aceptará DNI, apellidos y nombre), y miembros getter, será necesario también un miembro o miembros setter para poder cambiar las cinco notas (se recomienda utilizar un vector para almacenar las notas, y un enumerado para los valores a evaluar: BLOQUE_I, BLOQUE__I, BLOQUE_III, PROGRAMACION, PRACTICAS).
    La nota final se calcula sabiendo que la nota de cada bloque tiene un peso del 15%, la nota de programación tiene un peso del 30%, y la de prácticas el 25% restante.
     Los alumnos se visualizan de la siguiente forma: "dni - apellidos, nombre: nota final". La nota final de un alumno se visualiza como un mensaje de texto indicando la calificación (suspenso, aprobado, notable o sobresaliente), y entre paréntesis la nota numérica, por ejemplo: aprobado(5.6).

    Un polinomio se representa como sigue x^3 + 2x^2 + 5x + 9 = 0, y es muy sencillo de almacenar teniendo en cuenta que solamente es necesario recordar, para cada elemento, la constante por la que se multiplica (el coeficiente), y el factor al que elevar (el grado). Así, en el caso anterior, los pares (1, 3), (2, 2), (5, 1) y (9, 0) representarían el polinomio x^3 + 2x^2 + 5x + 9 = 0. Crea la clase Polinomio empleando las siguientes estrategias:
        Utiliza dos vectores paralelos. En el primer vector, almacenarás el coeficiente, mientras en el segundo almacenarás el grado. Para construir el polinomio, dado el elemento n, tomarás el coeficiente de coeficientes[ n ] (llamémosle c), y el grado de grados[ n ] (llamémosle g), con lo que el elemento n será cx^g.
        En realidad, los grados podrían ser simplemente la posición en un solo vector. Así, para un elemento n del polinomio, el coeficiente sería coeficientes[ n ] (llamémosle c) y el grado el propio valor de n. Así, resultaría en cx^n. Nótese que aquellas posiciones del vector en las que no existe un elemento correspondiente en el polinomio estarían a 0. Así, para x^3 + 9, el vector sería [1, 0, 0, 9].
